}
soma
A[k,k] - soma
soma = 0
soma = 0
A[k,k] - soma
k
c(1:k-1)
for(j in c(1:k-1))
print("oi")
for(j in 1:k-1)
print("oi")
k
j
j = 1
while (j < k-1)
print("oi")
soma = 0
j = 1
while (j < k-1){
soma = soma + G[k,j]^2
j = j + 1
}
r = A[k,k] - as.numeric(soma)
G[k,k] = sqrt(r)
r
G
dimensao_A = dim(A)[1]
G = matrix(, dimensao_A, dimensao_A)
for (k in c(1:dimensao_A)){
soma = 0
j = 1
while (j < k-1){
soma = soma + G[k,j]^2
j = j + 1
}
r = A[k,k] - as.numeric(soma)
G[k,k] = sqrt(r)
i = 1
while (i < dimensao_A){
soma = 0
j = 1
while (j < k -1){
soma = soma + G[i,j]*G[k,j]
j = j + 1
}
G[i,k] = (A[i,k] - soma)/G[k,k]
i = i + 1
}
}
G
A
dimensao_A = dim(A)[1]
G = matrix(, dimensao_A, dimensao_A)
for (k in c(1:dimensao_A)){
soma = 0
j = 1
while (j <= k-1){
soma = soma + G[k,j]^2
j = j + 1
}
r = A[k,k] - as.numeric(soma)
G[k,k] = sqrt(r)
i = 1
while (i <= dimensao_A){
soma = 0
j = 1
while (j <= k -1){
soma = soma + G[i,j]*G[k,j]
j = j + 1
}
G[i,k] = (A[i,k] - soma)/G[k,k]
i = i + 1
}
}
G
dimensao_A = dim(A)[1]
G = matrix(, dimensao_A, dimensao_A)
for (k in c(1:dimensao_A)){
soma = 0
j = 1
while (j < k-1){
soma = soma + G[k,j]^2
j = j + 1
}
r = A[k,k] - as.numeric(soma)
G[k,k] = sqrt(r)
i = 1
while (i < dimensao_A){
soma = 0
j = 1
while (j < k -1){
soma = soma + G[i,j]*G[k,j]
j = j + 1
}
G[i,k] = (A[i,k] - soma)/G[k,k]
i = i + 1
}
}
G
dimensao_A = dim(A)[1]
G = matrix(, dimensao_A, dimensao_A)
for (k in c(1:dimensao_A)){
soma = 0
j = 1
while (j <= k-1){
soma = soma + G[k,j]^2
j = j + 1
}
r = A[k,k] - as.numeric(soma)
G[k,k] = sqrt(r)
i = 1
while (i < dimensao_A){
soma = 0
j = 1
while (j <= k -1){
soma = soma + G[i,j]*G[k,j]
j = j + 1
}
G[i,k] = (A[i,k] - soma)/G[k,k]
i = i + 1
}
}
G
G = matrix(, dimensao_A, dimensao_A)
for (k in c(1:dimensao_A)){
soma = 0
j = 1
while (j < k-1){
soma = soma + G[k,j]^2
j = j + 1
}
r = A[k,k] - as.numeric(soma)
G[k,k] = sqrt(r)
i = 1
while (i < dimensao_A){
soma = 0
j = 1
while (j < k -1){
soma = soma + G[i,j]*G[k,j]
j = j + 1
}
G[i,k] = (A[i,k] - soma)/G[k,k]
i = i + 1
}
}
G
A
?chol
( m <- matrix(c(5,1,1,3),2,2) )
( cm <- chol(m) )
cm
m
A = m
A
dimensao_A = dim(A)[1]
G = matrix(, dimensao_A, dimensao_A)
for (k in c(1:dimensao_A)){
soma = 0
j = 1
while (j < k-1){
soma = soma + G[k,j]^2
j = j + 1
}
r = A[k,k] - as.numeric(soma)
G[k,k] = sqrt(r)
i = 1
while (i < dimensao_A){
soma = 0
j = 1
while (j < k -1){
soma = soma + G[i,j]*G[k,j]
j = j + 1
}
G[i,k] = (A[i,k] - soma)/G[k,k]
i = i + 1
}
}
G
( m <- matrix(c(5,1,1,3),2,2) )
( cm <- chol(m) )
G = matrix(0, dimensao_A, dimensao_A)
dimensao_A = dim(A)[1]
G = matrix(0, dimensao_A, dimensao_A)
for (k in c(1:dimensao_A)){
soma = 0
j = 1
while (j < k-1){
soma = soma + G[k,j]^2
j = j + 1
}
r = A[k,k] - as.numeric(soma)
G[k,k] = sqrt(r)
i = 1
while (i < dimensao_A){
soma = 0
j = 1
while (j < k -1){
soma = soma + G[i,j]*G[k,j]
j = j + 1
}
G[i,k] = (A[i,k] - soma)/G[k,k]
i = i + 1
}
}
G
( m <- matrix(c(5,1,1,3),2,2) )
( cm <- chol(m) )
A = matrix(c(,2,-1, 0, -1, 3, -1, 0, -1, 4))
A = matrix(c(,2,-1, 0, -1, 3, -1, 0, -1, 4), nrow = 3)
A = matrix(c(2,-1, 0, -1, 3, -1, 0, -1, 4), nrow = 3)
A
resolve = function(A, b){
#assumindo A matriz quadrada
dimensao_A = dim(A)[1]
G = matrix(0, dimensao_A, dimensao_A)
for (k in c(1:dimensao_A)){
soma = 0
j = 1
while (j < k-1){
soma = soma + G[k,j]^2
j = j + 1
}
r = A[k,k] - as.numeric(soma)
G[k,k] = sqrt(r)
i = 1
while (i < dimensao_A){
soma = 0
j = 1
while (j < k -1){
soma = soma + G[i,j]*G[k,j]
j = j + 1
}
G[i,k] = (A[i,k] - soma)/G[k,k]
i = i + 1
}
}
return (G);
}
A
chol(A)
resolve(A)
resolve = function(A, b){
#assumindo A matriz quadrada
dimensao_A = dim(A)[1]
G = matrix(0, dimensao_A, dimensao_A)
for (k in c(1:dimensao_A)){
soma = 0
j = 1
while (j < k-1){
soma = soma + G[k,j]^2
j = j + 1
}
r = A[k,k] - as.numeric(soma)
G[k,k] = sqrt(r)
i = 1
# while (i < dimensao_A){
#   soma = 0
#   j = 1
#   while (j < k -1){
#     soma = soma + G[i,j]*G[k,j]
#     j = j + 1
#   }
#   G[i,k] = (A[i,k] - soma)/G[k,k]
#   i = i + 1
# }
}
return (G);
}
chol(A)
resolve(A)
t(chol(matrix(c(25, 15, -5, 15, 18, 0, -5, 0, 11), nrow=3, ncol=3)))
A = matrix(c(25, 15, -5, 15, 18, 0, -5, 0, 11), nrow=3, ncol=3)
A
resolve(A)
resolve = function(A, b){
#assumindo A matriz quadrada
dimensao_A = dim(A)[1]
G = matrix(0, dimensao_A, dimensao_A)
for (k in c(1:dimensao_A)){
soma = 0
j = 1
while (j < k-1){
soma = soma + G[k,j]^2
j = j + 1
}
r = A[k,k] - as.numeric(soma)
G[k,k] = sqrt(r)
i = 1
while (i < dimensao_A){
soma = 0
j = 1
while (j < k -1){
soma = soma + G[i,j]*G[k,j]
j = j + 1
}
G[i,k] = (A[i,k] - soma)/G[k,k]
i = i + 1
}
}
return (G);
}
t(chol(matrix(c(25, 15, -5, 15, 18, 0, -5, 0, 11), nrow=3, ncol=3)))
resolve(A)
n =3
matrix(0, nrow = n, ncol = n)
sq
sq()
?square
A
chol(A)
cholesky = function(A, n){
G = matrix(0, nrow = n, ncol = n)
i = 1
while(i <= n){
j = 1
while(j <= i + 1){
soma = 0
if (j == i){
k = 1
while(k <= j){
soma = soma + G[j,k]^2
k = k + 1
}
G[j,j] = sqrt(A[j,j]) - soma
} else {
k = 1
while(k <= j){
soma = soma + G[i,k]*G[j,k]
k = k + 1
}
G[i,j] = (A[i,j] - soma)/G[j,j]
}
j = j + 1
}
i = i +1
}
}
chol(A)
cholesky(A)
cholesky(A, n)
cholesky = function(A, n){
G = matrix(0, nrow = n, ncol = n)
i = 0
while(i < n){
j = 0
while(j < i + 1){
soma = 0
if (j == i){
k = 0
while(k < j){
soma = soma + G[j + 1,k + 1]^2
k = k + 1
}
G[j,j] = sqrt(A[j+1,j+1]) - soma
} else {
k = 0
while(k < j){
soma = soma + G[i+1,k+1]*G[j+1,k+1]
k = k + 1
}
G[i+1,j+1] = (A[i+1,j+1] - soma)/G[j+1,j+1]
}
j = j + 1
}
i = i +1
}
}
cholesky(A, n)
A
cholesky = function(A, n){
G = matrix(0, nrow = n, ncol = n)
i = 0
while(i < n){
j = 0
while(j < i + 1){
soma = 0
if (j == i){
k = 0
while(k < j){
soma = soma + G[j + 1,k + 1]^2
k = k + 1
}
G[j,j] = sqrt(A[j+1,j+1]) - soma
} else {
k = 0
while(k < j){
soma = soma + G[i+1,k+1]*G[j+1,k+1]
k = k + 1
}
G[i+1,j+1] = (A[i+1,j+1] - soma)/G[j+1,j+1]
}
j = j + 1
}
i = i +1
}
return (G)
}
cholesky(A, n)
cholesky(A, 3)
A
chol(A)
for i in 1:4
for (i in 1:4)
print(i)
for(i in 1:1)
print("oi")
cholesky = function(A, n){
L = matrix(0, nrow = n, ncol = n)
for (i in 1:n){
for (k in 1:i){
soma1 = 0
soma2 = 0
j =1
while(j < k){
if(i==k){
soma1 = soma1 + L[k,j]^2
L[k,k] = sqrt(A[k,k]) - soma1
} else if (i > k){
soma2 = soma2 + L[i,i]*l[k,j]
L[i,k] = (A[1,k] - soma2)/L[k,k]
} else {
L[i,k] = 0
}
j = j + 1
}
}
}
return (G)
}
A
chol(A)
cholesky(A,3)
cholesky = function(A, n){
L = matrix(0, nrow = n, ncol = n)
for (i in 1:n){
for (k in 1:i){
soma1 = 0
soma2 = 0
j =1
while(j < k){
if(i==k){
soma1 = soma1 + L[k,j]^2
L[k,k] = sqrt(A[k,k]) - soma1
} else if (i > k){
soma2 = soma2 + L[i,i]*L[k,j]
L[i,k] = (A[1,k] - soma2)/L[k,k]
} else {
L[i,k] = 0
}
j = j + 1
}
}
}
return (G)
}
A
chol(A)
cholesky(A,3)
A
cholesky = function(A, n){
L = matrix(0, nrow = n, ncol = n)
for (i in 1:n){
for (k in 1:i){
soma1 = 0
soma2 = 0
j = 1
while(j <= k - 1){
if(i==k){
soma1 = soma1 + L[k,j]^2
L[k,k] = sqrt(A[k,k]) - soma1
} else if (i > k){
soma2 = soma2 + L[i,i]*L[k,j]
L[i,k] = (A[1,k] - soma2)/L[k,k]
} else {
L[i,k] = 0
}
j = j + 1
}
}
}
return (G)
}
cholesky(A,3)
cholesky(A,3)
chol(A)
A
cholesky = function(A, n){
L = matrix(0, nrow = n, ncol = n)
for (i in 1:n){
for (k in 1:i){
soma1 = 0
soma2 = 0
j = 1
for (j in 1:k-1){
if(i==k){
soma1 = soma1 + L[k,j]^2
L[k,k] = sqrt(A[k,k]) - soma1
} else if (i > k){
soma2 = soma2 + L[i,i]*L[k,j]
L[i,k] = (A[1,k] - soma2)/L[k,k]
} else {
L[i,k] = 0
}
}
}
}
return (G)
}
chol(A)
cholesky(A)
cholesky(A,3)
